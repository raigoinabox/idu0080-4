
/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

package ee.ttu.tud.idu0080.bp;

import java.io.IOException;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.RoundingMode;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;

import localhost.raigo.Courier;
import localhost.raigo.Services;
import localhost.raigo.ServicesPortType;
import localhost.raigo.TransportOffer;
import ttu.idu0080.order.server.Order;
import ttu.idu0080.order.server.OrderService;
import ttu.idu0080.order.server.OrderServiceService;

/**
 * This class was generated by Apache CXF 2.5.1 2017-02-20T12:51:56.913+02:00
 * Generated source version: 2.5.1
 * 
 */

@javax.jws.WebService(serviceName = "bp", portName = "bpSOAP", targetNamespace = "http://idu0080.tud.ttu.ee/bp/", wsdlLocation = "file:/home/raigo/Dokumendid/veebiteenused/src/BP/WebContent/bp.wsdl", endpointInterface = "ee.ttu.tud.idu0080.bp.Bp")

public class BpImpl implements Bp {

	private static final String LOG_FILE = "/home/raigo/.cache/veebiteenused/bprocess.log";
	private static final Logger LOG = getLogger();

	private static Logger getLogger() {
		Logger logger = Logger.getLogger(BpImpl.class.getName());
		try {
			FileHandler fileHandler = new FileHandler(LOG_FILE);
			fileHandler.setFormatter(new SimpleFormatter());
			logger.addHandler(fileHandler);
		} catch (SecurityException e) {
			throw new RuntimeException(e);
		} catch (IOException e) {
			throw new RuntimeException(e);
		}

		return logger;
	}

	public static void main(String[] args) {
		MinuTellimus tellimus = new MinuTellimus();
		tellimus.setId(BigInteger.valueOf(10));
		MinuTellimuseVastus vastus = new BpImpl().tellimuseEsitamine(tellimus);
		System.out.println(vastus.getTeade());
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see ee.ttu.tud.idu0080.bp.Bp#tellimuseEsitamine(ee.ttu.tud.idu0080.bp.
	 * MinuTellimus parameters )*
	 */
	public MinuTellimuseVastus tellimuseEsitamine(MinuTellimus parameters) {
		try {
			LOG.info("Process begin");
			int orderId = parameters.getId().intValue();

			OrderServiceService orderService = new OrderServiceService();
			OrderService orderServicePort = orderService.getOrderServicePort();

			Services transportService = new Services();
			ServicesPortType transportServicePort = transportService.getServicesPort();

			Order order = orderServicePort.getOrdersByOrderId(orderId);
			LOG.info("Order id = " + orderId + ", order price = " + order.getPriceTotal());

			List<Courier> couriers = transportServicePort.getCouriers();
			if (couriers.isEmpty()) {
				MinuTellimuseVastus response = new MinuTellimuseVastus();
				response.setTeade("Kullerfirmasid ei ole.");
				LOG.info(response.getTeade());
				LOG.info("Process end");
				return response;
			}

			List<CourierOffer> offers = new ArrayList<CourierOffer>();
			for (Courier courier : couriers) {
				TransportOffer offer = transportServicePort.getTransportOffer(courier.getId(), order);
				offers.add(new CourierOffer(courier, offer));
			}

			LOG.info("Received " + couriers.size() + " offers.");

			Courier bestCourier = null;
			TransportOffer bestOffer = null;
			BigDecimal bestOfferCost = null;
			for (CourierOffer courierOffer : offers) {
				TransportOffer offer = courierOffer.getOffer();
				Courier courier = courierOffer.getCourier();

				BigDecimal offerCost = offer.getTransportPrice().multiply(new BigDecimal(offer.getDeliveryTime()));

				Calendar approxDelivDate = Calendar.getInstance();
				approxDelivDate.add(Calendar.DATE, offer.getDeliveryTime().intValue());
				LOG.info(String.format(
						"Cost = %s, Courier = %s, Transport offer price = %s, days = %s, Approx. delivery date = %s",
						offerCost.setScale(2, RoundingMode.HALF_EVEN), courier.getName(),
						offer.getTransportPrice().setScale(2, RoundingMode.HALF_EVEN), offer.getDeliveryTime(),
						new SimpleDateFormat("yyyy-MM-dd").format(approxDelivDate.getTime())));

				if (bestOfferCost == null || offerCost.compareTo(bestOfferCost) < 0) {
					bestOfferCost = offerCost;
					bestOffer = offer;
					bestCourier = courier;
				}
			}

			LOG.info(String.format("Selected offer: courier: [%s], offer id: [%s], offer price: [%s]",
					bestCourier.getName(), bestOffer.getOfferId(),
					bestOffer.getTransportPrice().setScale(2, RoundingMode.HALF_EVEN)));

			String trackingNumber = transportServicePort.orderTransport(bestOffer.getOfferId());
			LOG.info("Tracking number = " + trackingNumber);

			MinuTellimuseVastus response = new MinuTellimuseVastus();
			response.setTeade("Tellimus tehtud: " + trackingNumber);
			LOG.info("Process end");
			return response;
		} catch (RuntimeException e) {
			LOG.log(Level.SEVERE, e.getLocalizedMessage(), e);
			throw e;
		}
	}
}
